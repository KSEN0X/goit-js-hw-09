{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-form.js"],"sourcesContent":["const KEY = 'feedback-form-state'; // key localStorage\nlet formData = {}; // an object in which the field name and value will be written\n\nconst form = document.querySelector('.feedback-form'); // reference to the DOM element-form\nform.addEventListener('input', onInputHandler); // on the form things listener for the input event and the onInputHandler function\nform.addEventListener('submit', onSubmitHandler); // on the form things listener for the submit event and the function onSubmit Handler\n\nrefreshForm(); // calling a function that will save data even when the page is reloaded if it was entered in some of the fields but was not sent\n/**\n  |=======================================\n  | Function - saving data before sending\n  |======================================\n*/\nfunction refreshForm() {\n  try {\n    const savedData = localStorage.getItem(KEY); //In this variable we receive data from localStorage by key\n\n    if (!savedData) return; // if localStorage is empty and equals null, which equals false, exit the function\n    formData = JSON.parse(savedData); // parse the value from savedData\n    Object.entries(formData).forEach(([key, val]) => {\n      form.elements[key].value = val;\n    }); // using Object.entries we turn the formData object into an array, we go through it forEach, we compare form.elements[key]-name of the form with the key, and assign .value = val to the value\n  } catch ({ message }) {\n    console.log(message);\n  } // error block with destructuring, second way of writing catch(error){console.log(error.message)} - an error message is displayed\n}\n\n/**\n  |============================================\n  | Function - saving data in localStorage\n  |============================================\n*/\nfunction onInputHandler(event) {\n  const inputValue = event.target.value.trim(); // we remove spaces at the beginning and end of the values entered by the user on which the event occurred\n  const inputName = event.target.name; // using the name attribute we write down the name of the element on which the event occurred\n  formData[inputName] = inputValue; // With this entry we assign a value to the object formData[key] = value\n  localStorage.setItem(KEY, JSON.stringify(formData)); //write data to localStorage\n}\n\n/**\n  |===========================================\n  | Function - form, object and storage clearing\n  |===========================================\n*/\nfunction onSubmitHandler(event) {\n  event.preventDefault(); //prevents default behavior when submitting page reload\n  event.target.reset(); //assigns reset() to the button to clear the form\n  localStorage.removeItem(KEY); //clearing the key in the storage\n  console.log(formData); //output the object with the corrected data to the console\n  formData = {}; //clears an object\n}\n"],"names":["KEY","formData","form","onInputHandler","onSubmitHandler","refreshForm","savedData","key","val","message","event","inputValue","inputName"],"mappings":"oDAAA,MAAMA,EAAM,sBACZ,IAAIC,EAAW,CAAA,EAEf,MAAMC,EAAO,SAAS,cAAc,gBAAgB,EACpDA,EAAK,iBAAiB,QAASC,CAAc,EAC7CD,EAAK,iBAAiB,SAAUE,CAAe,EAE/CC,IAMA,SAASA,GAAc,CACrB,GAAI,CACF,MAAMC,EAAY,aAAa,QAAQN,CAAG,EAE1C,GAAI,CAACM,EAAW,OAChBL,EAAW,KAAK,MAAMK,CAAS,EAC/B,OAAO,QAAQL,CAAQ,EAAE,QAAQ,CAAC,CAACM,EAAKC,CAAG,IAAM,CAC/CN,EAAK,SAASK,GAAK,MAAQC,CACjC,CAAK,CACL,OAAW,CAAE,QAAAC,GAAT,CACA,QAAQ,IAAIA,CAAO,CACpB,CACH,CAOA,SAASN,EAAeO,EAAO,CAC7B,MAAMC,EAAaD,EAAM,OAAO,MAAM,KAAI,EACpCE,EAAYF,EAAM,OAAO,KAC/BT,EAASW,GAAaD,EACtB,aAAa,QAAQX,EAAK,KAAK,UAAUC,CAAQ,CAAC,CACpD,CAOA,SAASG,EAAgBM,EAAO,CAC9BA,EAAM,eAAc,EACpBA,EAAM,OAAO,QACb,aAAa,WAAWV,CAAG,EAC3B,QAAQ,IAAIC,CAAQ,EACpBA,EAAW,CAAA,CACb"}